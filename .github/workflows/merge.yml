name: "Release Manager/Go Merge"

on:
  workflow_call:
    inputs:
      pr_number:
        type: string
        description: PR number
        required: true
      user:
        type: string
        description: User name
        default: github-actions[bot]
      package_jsons_to_rewrite:
        type: string
        description: 'package.jsons to rewrite (json)'
        default: 'package.json'
    secrets:
      RULESET_EDIT_APP_ID:
        description: 'App ID for app to edit rulesets'
      RULESET_EDIT_APP_PRIVATE_KEY:
        description: 'Private key for app to edit rulesets'

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  merge:
    name: "Go Merge"
    runs-on: ubuntu-latest
    if: ${{ inputs.pr_number != '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Initialize
        uses: ./.github/actions/checkout-pr
        with:
          pr_number: ${{ inputs.pr_number }}
          user: ${{ inputs.user }}
      - name: Get target version
        uses: ./.github/actions/get-target-version
        id: v

      # rulesetを切り替え
      - uses: actions/create-github-app-token@v1
        id: app-token
        if: vars.RULESET_ID_WITHIN_RELEASE || vars.RULESET_ID_OUT_OF_RELEASE
        with:
          app-id: ${{ secrets.RULESET_EDIT_APP_ID }}
          private-key: ${{ secrets.RULESET_EDIT_APP_PRIVATE_KEY }}
      - name: Enable the ruleset
        uses: octokit/request-action@v2.x
        if: steps.app-token.outputs.token && vars.RULESET_ID_OUT_OF_RELEASE
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          route: PUT /repos/{repository}/rulesets/{ruleset_id}
          repository: ${{ github.repository }}
          ruleset_id: ${{ vars.RULESET_ID_OUT_OF_RELEASE }}
          enforcement: active
      - name: Disable the ruleset
        uses: octokit/request-action@v2.x
        if: steps.app-token.outputs.token && vars.RULESET_ID_WITHIN_RELEASE
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          route: PUT /repos/{repository}/rulesets/{ruleset_id}
          repository: ${{ github.repository }}
          ruleset_id: ${{ vars.RULESET_ID_WITHIN_RELEASE }}
          enforcement: disabled

      - name: 'Fetch PR data'
        id: pr-data
        run: |
          echo "data=$(gh pr view ${{ inputs.pr_number }} --json baseRefName,reviewDecision,isDraft,mergeStateStatus,statusCheckRollup,mergeable)" >> $GITHUB_OUTPUT
      - name: 'Check Mergeable: compare'
        uses: actions/script@v7
        env:
          pr_data: ${{ steps.pr-data.outputs.data }}
        with:
          script: |
            const pr = JSON.parse(process.env.pr_data);
            if (pr.isDraft) {
              throw new Error('PR is draft');
            }
            if (pr.reviewDecision !== 'APPROVED') {
              throw new Error(`reviewDecision is not APPROVED: ${pr.reviewDecision}`);
            }
            if (pr.mergeable !== 'MERGEABLE') {
              throw new Error(`Not mergeable: ${pr.mergeable}`);
            }
            if (pr.mergeStateStatus !== 'CLEAN') {
              throw new Error(`MergeStateStatus is not CLEAN: ${pr.mergeStateStatus}`);
            }
            if (pr.statusCheckRollup.find(s => s.conclusion !== 'SUCCESS')) {
              throw new Error('Not all status checks are success');
            }

      #region if failed
      - name: Re-enable the ruleset
        uses: octokit/request-action@v2.x
        if: failure() && steps.app-token.outputs.token && vars.RULESET_ID_WITHIN_RELEASE
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          route: PUT /repos/{repository}/rulesets/{ruleset_id}
          repository: ${{ github.repository }}
          ruleset_id: ${{ vars.RULESET_ID_WITHIN_RELEASE }}
          enforcement: active
      - name: Re-disable the ruleset
        uses: octokit/request-action@v2.x
        if: failure() && steps.app-token.outputs.token && vars.RULESET_ID_OUT_OF_RELEASE
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          route: PUT /repos/{repository}/rulesets/{ruleset_id}
          repository: ${{ github.repository }}
          ruleset_id: ${{ vars.RULESET_ID_OUT_OF_RELEASE }}
          enforcement: disabled
      #endregion

      # バージョンをpackage.jsonに書き込み
      - name: Write version
        uses: ./.github/actions/rewrite-package-json
        with:
          version: ${{ steps.v.outputs.target_version }}
          package_jsons: ${{ inputs.package_jsons_to_rewrite }}

      # commit, push
      - name: Commit version
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git commit -am "[skip ci] Release: ${{ steps.v.outputs.target_version }}"
            git push origin HEAD:release/${{ steps.v.outputs.target_version }}
          fi

      # Merge
      # (Retry because mergeable can unknown after push)
      - name: Try merge
        uses: nick-fields/retry@v2
        with:
          command: |
            gh pr merge ${{ inputs.pr_number }} --merge
          timeout_seconds: 30
          max_attempts: 3
          retry_wait_seconds: 5

      # CHANGELOG.mdの内容を取得
      - name: Get changelog
        uses: ./.github/actions/get-changelog
        with:
          version: ${{ steps.v.outputs.target_version }}
        id: changelog

      - name: Create tag
        run: |
          git tag "${{ steps.v.outputs.target_version }}"
          git push origin "${{ steps.v.outputs.target_version }}"

      # リリースを作成
      - name: Create release
        run: |
          gh release create "${{ steps.v.outputs.target_version }}" --title "${{ steps.v.outputs.target_version }}" --notes "${{ steps.changelog.outputs.changelog }}"

      # Declear base branch
      - name: Declear base branch
        id: declear-base-branch
        run: |
          echo "base_branch=$(echo "${{ steps.pr-data.outputs.data }}" | jq -r '.baseRefName')" >> $GITHUB_OUTPUT

      # CHANGELOG.mdにUnreleasedのテンプレートを追加
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.declear-base-branch.outputs.base_branch }}
      - name: Prepend CHANGELOG template
        env:
          CHANGES_TEMPLATE: |
            ## 202x.x.x (Unreleased)

            ### General
            -
            
            ### Client
            -
            
            ### Server
            -
            
        run: sed -i "1i $(echo "${CHANGES_TEMPLATE}" | sed -r 's/$/\\n/' | while IFS= read -r line; do echo -n "$line"; done)" CHANGELOG.md
      - name: Commit version
        run: |
          git commit -am "[skip ci] Update CHANGELOG.md (prepend template)"
          git push origin HEAD:${{ steps.declear-base-branch.outputs.base_branch }}
