name: "Dispatch Pre-release"

on:
  workflow_call:
    inputs:
      pr_number:
        type: string
        description: 'PR number'
        required: true
      user:
        type: string
        description: 'User name'
        default: 'github-actions[bot]'

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  dispatch-prerelease:
    name: "Dispatch Pre-release"
    runs-on: ubuntu-latest
    if: ${{ inputs.pr_number != '' }}
    # 開いているリリースのパッチバージョンを上げる
    steps:
      - uses: actions/checkout@v4
      - name: get_pr
        uses: ./.github/actions/checkout-pr
        with:
          pr_number: ${{ inputs.pr_number }}
          user: ${{ inputs.user }}
        id: get_pr
      - name: Get Target Version
        uses: ./.github/actions/get-target-version
        id: v
      # バージョンをインクリメント
      - name: Increment version
        uses: actions/script@v7
        env:
          CURRENT_VERSION: ${{ steps.v.outputs.current_version }}
          pr_is_draft: steps.get_pr.outputs.pr_is_draft
        with:
          script: |
            const [major, minor, _patch, _pre] = process.env.CURRENT_VERSION.split('.');
            const pre = Number(_pre);
            if (Number.isNaN(pre)) {
              console.error('Invalid pre version', process.env.CURRENT_VERSION, major, minor, _patch);
              throw new Error('Invalid pre version');
            }

            if (process.env.pr_is_draft == 'true') {
              if (_patch.endsWith('beta')) {
                return `${major}.${minor}.${_patch}.${pre + 1}`;
              }
              return `${major}.${minor}.${_patch.split('-')[0]}-beta.${pre + 1}`;
            }
            if (_patch.endsWith('rc')) {
              return `${major}.${minor}.${_patch}.${pre + 1}`;
            }
            return `${major}.${minor}.${_patch.split('-')[0]}-rc.${pre + 1}`;

          result-encoding: string
        id: release_version
      # バージョンをpackage.jsonに書き込み
      - name: Write version
        run: |
          jq '.version = "${{ steps.release_version.outputs.result }}"' package.json > package.json.tmp && mv package.json.tmp package.json
          jq '.version = "${{ steps.release_version.outputs.result }}"' packages/misskey-js/package.json > packages/misskey-js/package.json.tmp && mv packages/misskey-js/package.json.tmp packages/misskey-js/package.json
      # release/ブランチとタグを作成
      - name: Commit version
        run: |
          git commit -am "Bump version to ${{ steps.release_version.outputs.result }}"
          git push origin HEAD:release/${{ steps.v.outputs.target_version }}
          git tag "${{ steps.release_version.outputs.result }}"
          git push origin "${{ steps.release_version.outputs.result }}"
      # CHANGELOG.mdの内容を取得
      - name: Get changelog
        uses: ./.github/actions/get-changelog
        with:
          version: ${{ steps.v.outputs.target_version }}
        id: changelog
      # リリースを作成
      - name: Create release
        run: |
          gh release create "${{ steps.release_version.outputs.result }}" --prerelease --title "${{ steps.release_version.outputs.result }}" --notes "${{ steps.changelog.outputs.changelog }}"
      # PRのnotesを更新
      # (通常release-edit-with-pushで更新されているためここで更新されることはない)
      #- name: Update PR
      #  run: |
      #    gh pr edit ${{ inputs.pr_number }} --body "${{ steps.changelog.outputs.changelog }}"
